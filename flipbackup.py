# Form implementation generated from reading ui file 'flipgbackup.ui'
#
# Created by: PyQt6 UI code generator 6.9.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import configparser
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QShortcut,QKeySequence
import sys,os
from datetime import datetime
from PyQt6.QtWidgets import QFileDialog

class Ui_FlipGDriveBackup(QtCore.QObject):
    def __init__(self):
        super().__init__()
        #weekDays = ["Monday", "Tuesday", "Wednesday", "Thursday","Friday","Saturday","Sunday"]
        
            
       
        self.get_weekdays= self.get_WeekDays()
        now = datetime.now()
        self.current_hour = now.hour
        self.current_minute = now.minute
    def setupUi(self, FlipGDriveBackup):
        FlipGDriveBackup.setObjectName("FlipGDriveBackup")
        FlipGDriveBackup.setWindowModality(QtCore.Qt.WindowModality.NonModal)
        FlipGDriveBackup.resize(621, 348)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(FlipGDriveBackup.sizePolicy().hasHeightForWidth())
        FlipGDriveBackup.setSizePolicy(sizePolicy)
        FlipGDriveBackup.setMinimumSize(QtCore.QSize(621, 348))
        FlipGDriveBackup.setMaximumSize(QtCore.QSize(621, 348))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("ftplogo.jpg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        FlipGDriveBackup.setWindowIcon(icon)
        FlipGDriveBackup.setModal(False)
        self.Backup_progressBar = QtWidgets.QProgressBar(parent=FlipGDriveBackup)
        self.Backup_progressBar.setGeometry(QtCore.QRect(30, 240, 581, 23))
        self.Backup_progressBar.setMinimum(1)
        self.Backup_progressBar.setProperty("value", 100)
        self.Backup_progressBar.setObjectName("Backup_progressBar")
        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=FlipGDriveBackup)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(30, 140, 411, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.backup_Schedule_horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.backup_Schedule_horizontalLayout.setContentsMargins(9, 9, 9, 9)
        self.backup_Schedule_horizontalLayout.setSpacing(6)
        self.backup_Schedule_horizontalLayout.setObjectName("backup_Schedule_horizontalLayout")
        self.Weekly_checkBox = QtWidgets.QCheckBox(parent=self.horizontalLayoutWidget)
        self.Weekly_checkBox.setFocusPolicy(QtCore.Qt.FocusPolicy.TabFocus)
        self.Weekly_checkBox.setChecked(True)
        self.Weekly_checkBox.setObjectName("Weekly_checkBox")
        self.backup_Schedule_horizontalLayout.addWidget(self.Weekly_checkBox)
        self.WeekDays_comboBox = QtWidgets.QComboBox(parent=self.horizontalLayoutWidget)
        self.WeekDays_comboBox.setMaxVisibleItems(8)
        weekDays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        self.WeekDays_comboBox.addItems(weekDays)
        self.WeekDays_comboBox.setCurrentIndex(self.get_weekdays)
        self.WeekDays_comboBox.setObjectName("WeekDays_comboBox")
        self.backup_Schedule_horizontalLayout.addWidget(self.WeekDays_comboBox)
        self.Daily_checkBox = QtWidgets.QCheckBox(parent=self.horizontalLayoutWidget)
        self.Daily_checkBox.setChecked(True)
        self.Daily_checkBox.setObjectName("Daily_checkBox")
        self.backup_Schedule_horizontalLayout.addWidget(self.Daily_checkBox)
        self.Daily_timeEdit = QtWidgets.QTimeEdit(parent=self.horizontalLayoutWidget)
        #self.Daily_timeEdit.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(2025, 1, 1), QtCore.QTime(0, 0, 0)))
        self.Daily_timeEdit.setCalendarPopup(True)
        self.Daily_timeEdit.setCurrentSectionIndex(0)
        self.Daily_timeEdit.setObjectName("Daily_timeEdit")
        # Set current hour and minute
        self.Daily_timeEdit.setTime(QtCore.QTime(self.current_hour, self.current_minute))
        self.backup_Schedule_horizontalLayout.addWidget(self.Daily_timeEdit)
        self.HeadingLable = QtWidgets.QLabel(parent=FlipGDriveBackup)
        self.HeadingLable.setGeometry(QtCore.QRect(90, 23, 221, 16))
        self.HeadingLable.setStyleSheet("font: 12pt \"Calibri\";")
        self.HeadingLable.setObjectName("HeadingLable")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(parent=FlipGDriveBackup)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(30, 80, 181, 41))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.source_horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.source_horizontalLayout.setContentsMargins(9, 9, 9, 9)
        self.source_horizontalLayout.setSpacing(6)
        self.source_horizontalLayout.setObjectName("source_horizontalLayout")
        self.source_folder_lineEdit = QtWidgets.QLineEdit(parent=self.horizontalLayoutWidget_2)
        self.source_folder_lineEdit.setText("")
        self.source_folder_lineEdit.setMaxLength(150)
        self.source_folder_lineEdit.setFrame(True)
        self.source_folder_lineEdit.setObjectName("source_folder_lineEdit")
        self.source_horizontalLayout.addWidget(self.source_folder_lineEdit)
        self.toolButton = QtWidgets.QToolButton(parent=self.horizontalLayoutWidget_2)
        self.toolButton.setObjectName("toolButton")
        self.toolButton.clicked.connect(self.open_folder_dialog)
        self.source_horizontalLayout.addWidget(self.toolButton)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(parent=FlipGDriveBackup)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(270, 80, 141, 41))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.desti_horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.desti_horizontalLayout.setContentsMargins(9, 9, 9, 9)
        self.desti_horizontalLayout.setSpacing(6)
        self.desti_horizontalLayout.setObjectName("desti_horizontalLayout")
        self.desti_folder_lineEdit = QtWidgets.QLineEdit(parent=self.horizontalLayoutWidget_3)
        self.desti_folder_lineEdit.setText("")
        self.desti_folder_lineEdit.setMaxLength(150)
        self.desti_folder_lineEdit.setFrame(True)
        self.desti_folder_lineEdit.setObjectName("desti_folder_lineEdit")
        self.desti_horizontalLayout.addWidget(self.desti_folder_lineEdit)
        self.sourceDataLable = QtWidgets.QLabel(parent=FlipGDriveBackup)
        self.sourceDataLable.setGeometry(QtCore.QRect(90, 60, 49, 16))
        self.sourceDataLable.setObjectName("sourceDataLable")
        self.distDataLable = QtWidgets.QLabel(parent=FlipGDriveBackup)
        self.distDataLable.setGeometry(QtCore.QRect(300, 60, 71, 16))
        self.distDataLable.setObjectName("distDataLable")
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(parent=FlipGDriveBackup)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(30, 190, 461, 41))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.reporting_horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.reporting_horizontalLayout.setContentsMargins(9, 9, 9, 9)
        self.reporting_horizontalLayout.setSpacing(6)
        self.reporting_horizontalLayout.setObjectName("reporting_horizontalLayout")
        self.whatsapp_checkBox = QtWidgets.QCheckBox(parent=self.horizontalLayoutWidget_4)
        self.whatsapp_checkBox.setChecked(True)
        self.whatsapp_checkBox.setObjectName("whatsapp_checkBox")
        self.reporting_horizontalLayout.addWidget(self.whatsapp_checkBox)
        self.whatsapp_Number_lineEdit = QtWidgets.QLineEdit(parent=self.horizontalLayoutWidget_4)
        self.whatsapp_Number_lineEdit.setObjectName("whatsapp_Number_lineEdit")
        # Validator: Only allow 10 digit Indian mobile numbers (starts with 6-9)
        regex = QtCore.QRegularExpression(r"^[6-9][0-9]{9}$")
        validator = QtGui.QRegularExpressionValidator(regex, self.whatsapp_Number_lineEdit)
        self.whatsapp_Number_lineEdit.setValidator(validator)
        self.reporting_horizontalLayout.addWidget(self.whatsapp_Number_lineEdit)
        self.email_checkBox = QtWidgets.QCheckBox(parent=self.horizontalLayoutWidget_4)
        self.email_checkBox.setChecked(True)
        self.email_checkBox.setObjectName("email_checkBox")
        self.reporting_horizontalLayout.addWidget(self.email_checkBox)
        self.email_lineEdit = QtWidgets.QLineEdit(parent=self.horizontalLayoutWidget_4)
        self.email_lineEdit.setObjectName("email_lineEdit")
        # Validator: Only allow valid email addresses
        email_regex = QtCore.QRegularExpression(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$")
        email_validator = QtGui.QRegularExpressionValidator(email_regex, self.email_lineEdit)
        self.email_lineEdit.setValidator(email_validator)
        self.reporting_horizontalLayout.addWidget(self.email_lineEdit)
        self.Note_label = QtWidgets.QLabel(parent=FlipGDriveBackup)
        self.Note_label.setGeometry(QtCore.QRect(30, 270, 401, 16))
        self.Note_label.setObjectName("Note_label")
        self.Status_groupBox = QtWidgets.QGroupBox(parent=FlipGDriveBackup)
        self.Status_groupBox.setGeometry(QtCore.QRect(450, 20, 161, 161))
        self.Status_groupBox.setToolTip("")
        self.Status_groupBox.setStyleSheet("background-color: rgb(254, 255, 222);")
        self.Status_groupBox.setTitle("")
        self.Status_groupBox.setObjectName("Status_groupBox")
        self.LastBackup_label = QtWidgets.QLabel(parent=self.Status_groupBox)
        self.LastBackup_label.setGeometry(QtCore.QRect(40, 30, 71, 16))
        self.LastBackup_label.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.LastBackup_label.setObjectName("LastBackup_label")
        self.lastBackup_Status_label = QtWidgets.QLabel(parent=self.Status_groupBox)
        self.lastBackup_Status_label.setGeometry(QtCore.QRect(10, 60, 61, 16))
        self.lastBackup_Status_label.setStyleSheet("")
        self.lastBackup_Status_label.setObjectName("lastBackup_Status_label")
        self.lastBackup_time_label = QtWidgets.QLabel(parent=self.Status_groupBox)
        self.lastBackup_time_label.setGeometry(QtCore.QRect(80, 60, 61, 16))
        self.lastBackup_time_label.setStyleSheet("")
        self.lastBackup_time_label.setObjectName("lastBackup_time_label")
        self.googleDrive_space_label = QtWidgets.QLabel(parent=self.Status_groupBox)
        self.googleDrive_space_label.setGeometry(QtCore.QRect(10, 90, 121, 21))
        self.googleDrive_space_label.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.googleDrive_space_label.setObjectName("googleDrive_space_label")
        self.GdriveSpac_avaiable_label = QtWidgets.QLabel(parent=self.Status_groupBox)
        self.GdriveSpac_avaiable_label.setGeometry(QtCore.QRect(50, 120, 51, 16))
        self.GdriveSpac_avaiable_label.setObjectName("GdriveSpac_avaiable_label")
        self.frame = QtWidgets.QFrame(parent=FlipGDriveBackup)
        self.frame.setGeometry(QtCore.QRect(-30, 310, 681, 51))
        self.frame.setStyleSheet("background-color: rgb(85, 170, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.bottom_CompanyInfo_label = QtWidgets.QLabel(parent=self.frame)
        self.bottom_CompanyInfo_label.setGeometry(QtCore.QRect(110, 10, 471, 16))
        self.bottom_CompanyInfo_label.setObjectName("bottom_CompanyInfo_label")
        self.googleDriveLogo = QtWidgets.QLabel(parent=FlipGDriveBackup)
        self.googleDriveLogo.setGeometry(QtCore.QRect(60, 20, 25, 25))
        self.googleDriveLogo.setMinimumSize(QtCore.QSize(25, 25))
        self.googleDriveLogo.setMaximumSize(QtCore.QSize(25, 25))
        self.googleDriveLogo.setSizeIncrement(QtCore.QSize(20, 20))
        self.googleDriveLogo.setText("")
        self.googleDriveLogo.setPixmap(QtGui.QPixmap("Google_Drive_Logo.svg"))
        self.googleDriveLogo.setScaledContents(True)
        self.googleDriveLogo.setObjectName("googleDriveLogo")
        self.pushButton = QtWidgets.QPushButton(parent=FlipGDriveBackup)
        self.pushButton.setGeometry(QtCore.QRect(450, 260, 101, 41))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.OpenHandCursor))
        self.pushButton.setStyleSheet("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("cloud-backup-up-arrow.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton.setIcon(icon1)
        self.pushButton.setIconSize(QtCore.QSize(25, 25))
        self.pushButton.setDefault(False)
        self.pushButton.setFlat(False)
        self.pushButton.setObjectName("pushButton")
        self.retranslateUi(FlipGDriveBackup)
        QtCore.QMetaObject.connectSlotsByName(FlipGDriveBackup)
#Read Config File 
        file_path = "config.ini"

        if os.path.exists(file_path):
            self.read_conf_file()        
# Set tab order (example order, adjust as needed)
        QtWidgets.QWidget.setTabOrder(self.source_folder_lineEdit, self.toolButton)
        QtWidgets.QWidget.setTabOrder(self.toolButton, self.desti_folder_lineEdit)
        QtWidgets.QWidget.setTabOrder(self.desti_folder_lineEdit, self.Weekly_checkBox)
        QtWidgets.QWidget.setTabOrder(self.Weekly_checkBox, self.WeekDays_comboBox)
        QtWidgets.QWidget.setTabOrder(self.WeekDays_comboBox, self.Daily_checkBox)
        QtWidgets.QWidget.setTabOrder(self.Daily_checkBox, self.Daily_timeEdit)
        QtWidgets.QWidget.setTabOrder(self.Daily_timeEdit, self.whatsapp_checkBox)
        QtWidgets.QWidget.setTabOrder(self.whatsapp_checkBox, self.whatsapp_Number_lineEdit)
        QtWidgets.QWidget.setTabOrder(self.whatsapp_Number_lineEdit, self.email_checkBox)
        QtWidgets.QWidget.setTabOrder(self.email_checkBox, self.email_lineEdit)
        QtWidgets.QWidget.setTabOrder(self.email_lineEdit, self.pushButton)
        # Set up Ctrl+D shortcut to call saveSettings
        shortcut = QShortcut(QKeySequence("Ctrl+D"), FlipGDriveBackup)
        shortcut.activated.connect(self.saveSettings)

        # Install event filter for Enter key navigation
        for w in [
            self.source_folder_lineEdit, self.toolButton, self.desti_folder_lineEdit,
            self.Weekly_checkBox, self.WeekDays_comboBox, self.Daily_checkBox, self.Daily_timeEdit,
            self.whatsapp_checkBox, self.whatsapp_Number_lineEdit, self.email_checkBox, self.email_lineEdit, self.pushButton
        ]:
            w.installEventFilter(self)

    def eventFilter(self, obj, event):
        if event.type() == QtCore.QEvent.Type.KeyPress:
            if event.key() in (QtCore.Qt.Key.Key_Return, QtCore.Qt.Key.Key_Enter):
                obj.focusNextChild()
                return True
        return False

    def retranslateUi(self, FlipGDriveBackup):
        _translate = QtCore.QCoreApplication.translate
        FlipGDriveBackup.setWindowTitle(_translate("FlipGDriveBackup", "Fliparrow Google Drive Auto Backup V.001"))
        self.Weekly_checkBox.setText(_translate("FlipGDriveBackup", "Weekly "))
        self.WeekDays_comboBox.setPlaceholderText(_translate("FlipGDriveBackup", "WeekDays"))
        self.Daily_checkBox.setText(_translate("FlipGDriveBackup", "Daily Backup"))
        self.HeadingLable.setText(_translate("FlipGDriveBackup", "AutoData Backup on Google Drive "))
        self.source_folder_lineEdit.setPlaceholderText(_translate("FlipGDriveBackup", "Data Folder"))
        self.toolButton.setText(_translate("FlipGDriveBackup", "..."))
        self.desti_folder_lineEdit.setPlaceholderText(_translate("FlipGDriveBackup", "Enter Folder Name"))
        self.sourceDataLable.setText(_translate("FlipGDriveBackup", "Source"))
        self.distDataLable.setText(_translate("FlipGDriveBackup", "Google Drive"))
        self.whatsapp_checkBox.setText(_translate("FlipGDriveBackup", "WhatsApp"))
        self.email_checkBox.setText(_translate("FlipGDriveBackup", "Email"))
        self.Note_label.setText(_translate("FlipGDriveBackup", "Note : Backup takes time according to data size and Bandwidth of Internet "))
        self.LastBackup_label.setText(_translate("FlipGDriveBackup", "Last Backup "))
        self.lastBackup_Status_label.setText(_translate("FlipGDriveBackup", "Sucessful"))
        self.lastBackup_time_label.setText(_translate("FlipGDriveBackup", "12:00 PM"))
        self.googleDrive_space_label.setText(_translate("FlipGDriveBackup", "Google Drive Space"))
        self.GdriveSpac_avaiable_label.setText(_translate("FlipGDriveBackup", "5.6 GB"))
        self.bottom_CompanyInfo_label.setText(_translate("FlipGDriveBackup", "Fliparrow Technologies P. Ltd. |    Support : 011 71523618  |    Email: info@fliparrow.com"))
        self.pushButton.setText(_translate("FlipGDriveBackup", "Backup"))
        # Assuming 'self' is your main window or widget
    def open_folder_dialog(self):
        parent_widget = self.source_folder_lineEdit.parentWidget()
        folder_path = QFileDialog.getExistingDirectory(parent_widget, "Select Data Folder")
        if folder_path:
            self.source_folder_lineEdit.setText(folder_path)
        else:
            self.source_folder_lineEdit.setText("")
# Create a ConfigParser object
    def saveSettings(self):
        
        config = configparser.ConfigParser()
        source_folder_path = self.source_folder_lineEdit.text()
        desti_folder_path = self.desti_folder_lineEdit.text()
        Week_Days=self.WeekDays_comboBox.currentIndex()
        daily_time=self.Daily_timeEdit.text()
        whatsApp_Number=self.whatsapp_Number_lineEdit.text()
        email= self.email_lineEdit.text()
    # Add sections and settings
        config['General'] = {'Source_Folder': source_folder_path, 'Destination_Path': desti_folder_path}
        config['Schedule'] = {'Weekly_Backup': Week_Days, 'Daily_Time': daily_time}
        config['reporting'] = {'WhatsApp': whatsApp_Number, 'Email': email}

    # Save the configuration to a file
        with open('config.ini', 'w') as configfile:
            config.write(configfile)
    def read_conf_file(self):
        config = configparser.ConfigParser()
        config.read('config.ini')
        # Access values
        source_folder_path = config['General']['Source_Folder']
        self.source_folder_lineEdit.setText(source_folder_path)
        desti_folder_path = config['General']['Destination_Path']
        self.desti_folder_lineEdit.setText(desti_folder_path)
        Week_Days = int(config['Schedule']['Weekly_Backup'])
        self.WeekDays_comboBox.setCurrentIndex(Week_Days)
        daily_time = config['Schedule']['Daily_Time']
        time_obj = QtCore.QTime.fromString(daily_time, "HH:mm")
        if time_obj.isValid():
            self.Daily_timeEdit.setTime(time_obj)
        whatsApp_Number= config['reporting']['WhatsApp']
        self.whatsapp_Number_lineEdit.setText(whatsApp_Number)
        email= config['reporting']['Email']
        self.email_lineEdit.setText(email)
    def get_WeekDays(self):
        today_weekday_number = datetime.today().weekday()
        return today_weekday_number
# FlipGDriveBackup = QtWidgets.QMainWindow()
# upi=Ui_FlipGDriveBackup()
# upi.setupUi(FlipGDriveBackup)
# FlipGDriveBackup.show()
# sys.exit(app.exec_())
# import sys  

# from PyQt6.QtGui import QKeySequence
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    dialog = QtWidgets.QDialog()
    ui = Ui_FlipGDriveBackup()
    ui.setupUi(dialog)
    dialog.show()
    sys.exit(app.exec())